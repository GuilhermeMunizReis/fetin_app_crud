import { AnyColumn } from './column';
import { SQL, SQLResponse } from './sql';
export declare type RequiredKeyOnly<TKey extends string, T extends AnyColumn> = T extends AnyColumn<{
    notNull: true;
    hasDefault: false;
}> ? TKey : never;
export declare type OptionalKeyOnly<TKey extends string, T extends AnyColumn> = TKey extends RequiredKeyOnly<TKey, T> ? never : TKey;
export declare type SelectFields<TTableName extends string, TColumnDriverParam> = {
    [key: string]: SQL | SQLResponse | AnyColumn<{
        tableName: TTableName;
        driverParam: TColumnDriverParam;
    }>;
};
export declare type SelectFieldsOrdered = {
    path: string[];
    field: AnyColumn | SQL | SQLResponse;
}[];
//# sourceMappingURL=operations.d.ts.map