"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapResultRow = exports.npmVersion = exports.apiVersion = void 0;
const column_1 = require("./column");
const sql_1 = require("./sql");
exports.apiVersion = 1;
exports.npmVersion = '0.15.0';
function mapResultRow(columns, row, joinsNotNullable) {
    const result = columns.reduce((result, { path, field }, columnIndex) => {
        let decoder;
        if (field instanceof column_1.Column) {
            decoder = field;
        }
        else if (field instanceof sql_1.SQL) {
            decoder = sql_1.noopDecoder;
        }
        else {
            decoder = field.decoder;
        }
        let node = result;
        path.forEach((pathChunk, pathChunkIndex) => {
            if (pathChunkIndex < path.length - 1) {
                if (!(pathChunk in node)) {
                    node[pathChunk] = {};
                }
                node = node[pathChunk];
            }
            else {
                const rawValue = row[columnIndex];
                node[pathChunk] = rawValue === null ? null : decoder.mapFromDriverValue(rawValue);
            }
        });
        return result;
    }, {});
    if (!joinsNotNullable) {
        return result;
    }
    // If all fields in a table are null, return null for the table
    return Object.fromEntries(Object.entries(result).map(([tableName, tableResult]) => {
        if (!joinsNotNullable[tableName]) {
            const hasNotNull = Object.values(tableResult).some((value) => value !== null);
            if (!hasNotNull) {
                return [tableName, null];
            }
        }
        return [tableName, tableResult];
    }));
}
exports.mapResultRow = mapResultRow;
//# sourceMappingURL=utils.js.map