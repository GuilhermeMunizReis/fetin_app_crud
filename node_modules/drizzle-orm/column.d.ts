import { ColumnBuilder, ColumnBuilderBaseConfig, ColumnBuilderConfig } from './column-builder';
import { DriverValueMapper, SQL } from './sql';
import { Table } from './table';
import { Update } from './utils';
export interface ColumnBaseConfig extends ColumnBuilderBaseConfig {
    tableName: string;
}
export declare type ColumnConfig<TPartial extends Partial<ColumnBaseConfig> = {}> = Update<ColumnBuilderConfig & {
    tableName: string;
}, TPartial>;
export declare abstract class Column<T extends Partial<ColumnBaseConfig>> implements DriverValueMapper<T['data'], T['driverParam']> {
    readonly table: Table<T['tableName']>;
    protected $brand: 'Column';
    protected $config: T;
    protected $data: T['data'];
    protected $driverParam: T['driverParam'];
    protected $notNull: T['notNull'];
    protected $hasDefault: T['hasDefault'];
    readonly name: string;
    readonly primary: boolean;
    readonly notNull: boolean;
    readonly default: T['data'] | SQL | undefined;
    readonly hasDefault: boolean;
    constructor(table: Table<T['tableName']>, config: ColumnBuilder<Omit<T, 'tableName'>>['config']);
    abstract getSQLType(): string;
    mapFromDriverValue(value: T['driverParam']): T['data'];
    mapToDriverValue(value: T['data']): T['driverParam'];
}
export declare type UpdateColConfig<T extends Partial<ColumnBaseConfig>, TUpdate extends Partial<ColumnBaseConfig>> = Update<T, TUpdate>;
export declare type AnyColumn<TPartial extends Partial<ColumnBaseConfig> = {}> = Column<Update<ColumnBaseConfig, TPartial>>;
export declare type GetColumnData<TColumn extends AnyColumn, TInferMode extends 'query' | 'raw' = 'query'> = TColumn extends AnyColumn<{
    data: infer TData;
    notNull: infer TNotNull extends boolean;
}> ? TInferMode extends 'raw' ? TData : TNotNull extends true ? TData : TData | null : never;
/**
    `GetColumnConfig` can be used to infer either the full config of the column or a single parameter.
    @example
    type TConfig = GetColumnConfig<typeof column>;
    type TNotNull = GetColumnConfig<typeof column, 'notNull'>;
*/
export declare type GetColumnConfig<TColumn extends AnyColumn, TParam extends keyof ColumnBaseConfig | undefined = undefined> = TColumn extends Column<infer TConfig> ? TParam extends keyof ColumnBaseConfig ? TConfig[TParam] : TConfig : never;
export declare type InferColumnsDataTypes<TColumns extends Record<string, AnyColumn>> = {
    [Key in keyof TColumns]: GetColumnData<TColumns[Key], 'query'>;
};
//# sourceMappingURL=column.d.ts.map