"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readMigrationFiles = void 0;
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function readMigrationFiles(config) {
    let migrationFolderTo;
    if (typeof config === 'string') {
        const configAsString = fs_1.default.readFileSync(path_1.default.resolve('.', config), 'utf8');
        const jsonConfig = JSON.parse(configAsString);
        migrationFolderTo = jsonConfig.out;
    }
    else {
        migrationFolderTo = config.migrationsFolder;
    }
    if (!migrationFolderTo) {
        throw Error('no migration folder defined');
    }
    const files = fs_1.default.readdirSync(migrationFolderTo);
    const migrationQueries = [];
    for (const migrationFolder of files) {
        if (migrationFolder === '.DS_Store') {
            continue;
        }
        const migrationFiles = fs_1.default.readdirSync(`${migrationFolderTo}/${migrationFolder}`);
        const migrationFile = migrationFiles.filter((file) => file === 'migration.sql')[0];
        const query = fs_1.default
            .readFileSync(`${migrationFolderTo}/${migrationFolder}/${migrationFile}`)
            .toString();
        const year = Number(migrationFolder.slice(0, 4));
        // second param for Date() is month index, that started from 0, so we need
        // to decrement a value for month
        const month = Number(migrationFolder.slice(4, 6)) - 1;
        const day = Number(migrationFolder.slice(6, 8));
        const hour = Number(migrationFolder.slice(8, 10));
        const min = Number(migrationFolder.slice(10, 12));
        const sec = Number(migrationFolder.slice(12, 14));
        const folderAsMillis = Date.UTC(year, month, day, hour, min, sec);
        migrationQueries.push({
            sql: query,
            folderMillis: folderAsMillis,
            hash: crypto_1.default.createHash('sha256').update(query).digest('hex'),
        });
    }
    return migrationQueries;
}
exports.readMigrationFiles = readMigrationFiles;
//# sourceMappingURL=migrator.js.map