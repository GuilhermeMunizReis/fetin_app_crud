import { SQL } from './sql';
import { Simplify, Update } from './utils';
export interface ColumnBuilderBaseConfig {
    data: unknown;
    driverParam: unknown;
    notNull: boolean;
    hasDefault: boolean;
}
export declare type ColumnBuilderConfig<TPartial extends Partial<ColumnBuilderBaseConfig> = {}> = Update<ColumnBuilderBaseConfig & {
    notNull: false;
    hasDefault: false;
}, TPartial>;
export declare abstract class ColumnBuilderWithConfig<T extends Partial<ColumnBuilderBaseConfig>> {
    protected $config: T;
}
export declare abstract class ColumnBuilder<T extends Partial<ColumnBuilderBaseConfig>, TConfig extends Record<string, unknown> = {}> extends ColumnBuilderWithConfig<T> {
    protected $brand: {
        type: 'ColumnBuilder';
        subtype: string;
    };
    protected $data: T['data'];
    protected $driverParam: T['driverParam'];
    protected $notNull: T['notNull'];
    protected $hasDefault: T['hasDefault'];
    protected config: {
        name: string;
        notNull: boolean;
        default: T['data'] | SQL | undefined;
        hasDefault: boolean;
        primaryKey: boolean;
    } & TConfig;
    constructor(name: string);
    notNull(): ColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): ColumnBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): ColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
}
export declare type UpdateCBConfig<T extends Partial<ColumnBuilderBaseConfig>, TUpdate extends Partial<ColumnBuilderBaseConfig>> = Simplify<Pick<T, Exclude<keyof T, keyof TUpdate>> & TUpdate>;
//# sourceMappingURL=column-builder.d.ts.map