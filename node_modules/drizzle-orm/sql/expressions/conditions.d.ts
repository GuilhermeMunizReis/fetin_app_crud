import { AnyColumn, GetColumnData } from '../../column';
import { Placeholder, SQL, SQLWrapper } from '..';
export declare function eq<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn, 'raw'> | Placeholder): SQL;
export declare function eq(left: AnyColumn, right: AnyColumn): SQL;
export declare function ne<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn> | Placeholder): SQL;
export declare function ne(left: AnyColumn, right: AnyColumn): SQL;
export declare function and(...conditions: (SQL | undefined)[]): SQL | undefined;
export declare function or(...conditions: (SQL | undefined)[]): SQL | undefined;
export declare function not(condition: SQL): SQL;
export declare function gt<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn> | Placeholder): SQL;
export declare function gt(left: AnyColumn, right: AnyColumn): SQL;
export declare function gte<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn> | Placeholder): SQL;
export declare function gte(left: AnyColumn, right: AnyColumn): SQL;
export declare function lt<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn> | Placeholder): SQL;
export declare function lt(left: AnyColumn, right: AnyColumn): SQL;
export declare function lte<TColumn extends AnyColumn>(column: TColumn, value: GetColumnData<TColumn> | Placeholder): SQL;
export declare function lte(left: AnyColumn, right: AnyColumn): SQL;
export declare function inArray<TColumn extends AnyColumn>(column: TColumn, values: (GetColumnData<TColumn> | Placeholder)[]): SQL;
export declare function inArray(column: AnyColumn, subquery: SQLWrapper): SQL;
export declare function notInArray<TColumn extends AnyColumn>(column: TColumn, values: (GetColumnData<TColumn> | Placeholder)[]): SQL;
export declare function notInArray(column: AnyColumn, subquery: SQLWrapper): SQL;
export declare function isNull(column: AnyColumn<{
    notNull: false;
}>): SQL;
export declare function isNotNull(column: AnyColumn): SQL;
export declare function exists(subquery: SQLWrapper): SQL;
export declare function notExists(subquery: SQLWrapper): SQL;
export declare function between<TColumn extends AnyColumn>(column: TColumn, min: GetColumnData<TColumn, 'raw'> | Placeholder, max: GetColumnData<TColumn, 'raw'> | Placeholder): SQL;
export declare function notBetween<TColumn extends AnyColumn>(column: TColumn, min: GetColumnData<TColumn, 'raw'> | Placeholder, max: GetColumnData<TColumn, 'raw'> | Placeholder): SQL;
export declare function like(column: AnyColumn, value: string): SQL;
export declare function notLike(column: AnyColumn, value: string): SQL;
export declare function ilike(column: AnyColumn, value: string): SQL;
export declare function notIlike(column: AnyColumn, value: string): SQL;
//# sourceMappingURL=conditions.d.ts.map