"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notIlike = exports.ilike = exports.notLike = exports.like = exports.notBetween = exports.between = exports.notExists = exports.exists = exports.isNotNull = exports.isNull = exports.notInArray = exports.inArray = exports.lte = exports.lt = exports.gte = exports.gt = exports.not = exports.or = exports.and = exports.ne = exports.eq = void 0;
const column_1 = require("../../column");
const __1 = require("..");
function bindIfParam(value, column) {
    if (value instanceof column_1.Column || value instanceof __1.Placeholder) {
        return value;
    }
    else {
        return new __1.Param(value, column);
    }
}
function eq(left, right) {
    return (0, __1.sql) `${left} = ${bindIfParam(right, left)}`;
}
exports.eq = eq;
function ne(left, right) {
    return (0, __1.sql) `${left} <> ${bindIfParam(right, left)}`;
}
exports.ne = ne;
function and(...conditions) {
    if (conditions.length === 0) {
        return undefined;
    }
    const chunks = [__1.sql.raw('(')];
    conditions
        .filter((c) => typeof c !== 'undefined')
        .forEach((condition, index) => {
        if (index === 0) {
            chunks.push(condition);
        }
        else {
            chunks.push((0, __1.sql) ` and `, condition);
        }
    });
    chunks.push((0, __1.sql) `)`);
    return __1.sql.fromList(chunks);
}
exports.and = and;
function or(...conditions) {
    if (conditions.length === 0) {
        return undefined;
    }
    const chunks = [__1.sql.raw('(')];
    conditions
        .filter((c) => typeof c !== 'undefined')
        .forEach((condition, index) => {
        if (index === 0) {
            chunks.push(condition);
        }
        else {
            chunks.push((0, __1.sql) ` or `, condition);
        }
    });
    chunks.push((0, __1.sql) `)`);
    return __1.sql.fromList(chunks);
}
exports.or = or;
function not(condition) {
    return (0, __1.sql) `not ${condition}`;
}
exports.not = not;
function gt(left, right) {
    return (0, __1.sql) `${left} > ${bindIfParam(right, left)}`;
}
exports.gt = gt;
function gte(left, right) {
    return (0, __1.sql) `${left} >= ${bindIfParam(right, left)}`;
}
exports.gte = gte;
function lt(left, right) {
    return (0, __1.sql) `${left} < ${bindIfParam(right, left)}`;
}
exports.lt = lt;
function lte(left, right) {
    return (0, __1.sql) `${left} <= ${bindIfParam(right, left)}`;
}
exports.lte = lte;
function inArray(column, values) {
    if ((0, __1.isSQLWrapper)(values)) {
        return (0, __1.sql) `${column} in (${values})`;
    }
    if (values.length === 0) {
        throw new Error('inArray requires at least one value');
    }
    return (0, __1.sql) `${column} in ${values.map((v) => bindIfParam(v, column))}`;
}
exports.inArray = inArray;
function notInArray(column, values) {
    if ((0, __1.isSQLWrapper)(values)) {
        return (0, __1.sql) `${column} not in (${values})`;
    }
    if (values.length === 0) {
        throw new Error('notInArray requires at least one value');
    }
    return (0, __1.sql) `${column} not in ${values.map((v) => new __1.Param(v, column))}`;
}
exports.notInArray = notInArray;
function isNull(column) {
    return (0, __1.sql) `${column} is null`;
}
exports.isNull = isNull;
function isNotNull(column) {
    return (0, __1.sql) `${column} is not null`;
}
exports.isNotNull = isNotNull;
function exists(subquery) {
    return (0, __1.sql) `exists (${subquery})`;
}
exports.exists = exists;
function notExists(subquery) {
    return (0, __1.sql) `exists (${subquery})`;
}
exports.notExists = notExists;
function between(column, min, max) {
    return (0, __1.sql) `${column} between ${min} and ${max}`;
}
exports.between = between;
function notBetween(column, min, max) {
    return (0, __1.sql) `${column} not between ${min} and ${max}`;
}
exports.notBetween = notBetween;
function like(column, value) {
    return (0, __1.sql) `${column} like ${value}`;
}
exports.like = like;
function notLike(column, value) {
    return (0, __1.sql) `${column} not like ${value}`;
}
exports.notLike = notLike;
function ilike(column, value) {
    return (0, __1.sql) `${column} ilike ${value}`;
}
exports.ilike = ilike;
function notIlike(column, value) {
    return (0, __1.sql) `${column} not ilike ${value}`;
}
exports.notIlike = notIlike;
//# sourceMappingURL=conditions.js.map