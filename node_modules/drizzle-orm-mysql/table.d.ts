import { GetColumnData } from 'drizzle-orm';
import { OptionalKeyOnly, RequiredKeyOnly } from 'drizzle-orm/operations';
import { Table } from 'drizzle-orm/table';
import { Update } from 'drizzle-orm/utils';
import { Simplify } from 'drizzle-orm/utils';
import { CheckBuilder } from './checks';
import { AnyMySqlColumn, AnyMySqlColumnBuilder, BuildColumns } from './columns/common';
import { ForeignKeyBuilder } from './foreign-keys';
import { AnyIndexBuilder } from './indexes';
export declare type MySqlTableExtraConfig = Record<string, AnyIndexBuilder | CheckBuilder | ForeignKeyBuilder>;
export interface TableConfig<TName extends string = string> {
    name: TName;
    columns: Record<string | symbol, AnyMySqlColumn<{
        tableName: TName;
    }>>;
}
export declare type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Update<T, TUpdate>;
export declare class MySqlTable<T extends Partial<TableConfig>> extends Table<T['name']> {
    protected $columns: T['columns'];
}
export declare type AnyMySqlTable<TPartial extends Partial<TableConfig> = {}> = MySqlTable<UpdateTableConfig<TableConfig, TPartial>>;
export declare type MySqlTableWithColumns<T extends TableConfig> = MySqlTable<T> & {
    [Key in keyof T['columns']]: T['columns'][Key];
};
/**
 * See `GetColumnConfig`.
 */
export declare type GetTableConfig<T extends AnyMySqlTable, TParam extends keyof TableConfig | undefined = undefined> = T extends MySqlTableWithColumns<infer TConfig> ? TParam extends undefined ? TConfig : TParam extends keyof TConfig ? TConfig[TParam] : TConfig : never;
export declare type InferModel<TTable extends AnyMySqlTable, TInferMode extends 'select' | 'insert' = 'select'> = TInferMode extends 'insert' ? Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as RequiredKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
} & {
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as OptionalKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
}> : {
    [Key in keyof GetTableConfig<TTable, 'columns'>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
};
export interface MySqlSchema {
    schemaName: string;
}
export declare function isMySqlSchema(obj: unknown): obj is MySqlSchema;
/**
 * mysqlDatabase is same as {@link mysqlSchema} function
 *
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param databaseName - mysql use database name
 * @returns
 */
export declare function mysqlDatabase<T extends string = string>(databaseName: T): (<TTableName extends string, TColumnsMap extends Record<string, AnyMySqlColumnBuilder<{}>>>(name: TTableName, columns: TColumnsMap, extraConfig?: ((self: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>) => MySqlTableExtraConfig) | undefined) => MySqlTableWithColumns<{
    name: TTableName;
    columns: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>;
}>) & MySqlSchema;
/**
 * mysqlSchema is same as {@link mysqlDatabase} function
 *
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param schemaName - mysql use schema name
 * @returns
 */
export declare function mysqlSchema<T extends string = string>(schemaName: T): (<TTableName extends string, TColumnsMap extends Record<string, AnyMySqlColumnBuilder<{}>>>(name: TTableName, columns: TColumnsMap, extraConfig?: ((self: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>) => MySqlTableExtraConfig) | undefined) => MySqlTableWithColumns<{
    name: TTableName;
    columns: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>;
}>) & MySqlSchema;
export declare function mysqlTableWithSchema<TTableName extends string, TColumnsMap extends Record<string, AnyMySqlColumnBuilder>>(name: TTableName, columns: TColumnsMap, schema?: string, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap>) => MySqlTableExtraConfig): MySqlTableWithColumns<{
    name: TTableName;
    columns: BuildColumns<TTableName, TColumnsMap>;
}>;
export declare function mysqlTable<TTableName extends string, TColumnsMap extends Record<string, AnyMySqlColumnBuilder>>(name: TTableName, columns: TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap>) => MySqlTableExtraConfig): MySqlTableWithColumns<{
    name: TTableName;
    columns: BuildColumns<TTableName, TColumnsMap>;
}>;
//# sourceMappingURL=table.d.ts.map