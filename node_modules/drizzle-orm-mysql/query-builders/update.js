"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlUpdate = exports.MySqlUpdateBuilder = void 0;
const query_promise_1 = require("drizzle-orm/query-promise");
const utils_1 = require("../utils");
class MySqlUpdateBuilder {
    constructor(table, session, dialect) {
        this.table = table;
        this.session = session;
        this.dialect = dialect;
    }
    set(values) {
        return new MySqlUpdate(this.table, (0, utils_1.mapUpdateSet)(this.table, values), this.session, this.dialect);
    }
}
exports.MySqlUpdateBuilder = MySqlUpdateBuilder;
class MySqlUpdate extends query_promise_1.QueryPromise {
    constructor(table, set, session, dialect) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.execute = (placeholderValues) => {
            return this._prepare().execute(placeholderValues);
        };
        this.config = { set, table };
    }
    where(where) {
        this.config.where = where;
        return this;
    }
    // returning(): Omit<MySqlUpdate<TTable, InferModel<TTable>>, 'where' | 'returning'>;
    // returning<TSelectedFields extends SelectFields>(
    // 	fields: TSelectedFields,
    // ): Omit<MySqlUpdate<TTable, SelectResultFields<TSelectedFields>>, 'where' | 'returning'>;
    // returning(
    // 	fields: SelectFields = this.config.table[MySqlTable.Symbol.Columns],
    // ): Omit<MySqlUpdate<TTable, any>, 'where' | 'returning'> {
    // 	this.config.returning = orderSelectedFields(fields);
    // 	return this;
    // }
    /** @internal */
    getSQL() {
        return this.dialect.buildUpdateQuery(this.config);
    }
    toSQL() {
        return this.dialect.sqlToQuery(this.getSQL());
    }
    _prepare(name) {
        return this.session.prepareQuery(this.toSQL(), this.config.returning, name);
    }
    prepare(name) {
        return this._prepare(name);
    }
}
exports.MySqlUpdate = MySqlUpdate;
//# sourceMappingURL=update.js.map