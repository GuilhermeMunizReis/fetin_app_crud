import { GetColumnData } from 'drizzle-orm';
import { QueryPromise } from 'drizzle-orm/query-promise';
import { Param, Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { Simplify } from 'drizzle-orm/utils';
import { MySqlDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { MySqlRawQueryResult, MySqlSession, PreparedQuery, PreparedQueryConfig } from '../session';
import { AnyMySqlTable, GetTableConfig } from '../table';
export interface MySqlUpdateConfig {
    where?: SQL | undefined;
    set: MySqlUpdateSet;
    table: AnyMySqlTable;
    returning?: SelectFieldsOrdered;
}
export declare type MySqlUpdateSetSource<TTable extends AnyMySqlTable> = Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'> | SQL;
}>;
export declare type MySqlUpdateSet = Record<string, SQL | Param | null | undefined>;
export declare class MySqlUpdateBuilder<TTable extends AnyMySqlTable> {
    private table;
    private session;
    private dialect;
    protected $table: TTable;
    constructor(table: TTable, session: MySqlSession, dialect: MySqlDialect);
    set(values: MySqlUpdateSetSource<TTable>): MySqlUpdate<TTable>;
}
export interface MySqlUpdate<TTable extends AnyMySqlTable, TReturning = undefined> extends QueryPromise<MySqlRawQueryResult>, SQLWrapper {
}
export declare class MySqlUpdate<TTable extends AnyMySqlTable, TReturning = undefined> extends QueryPromise<MySqlRawQueryResult> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    protected $return: TReturning;
    private config;
    constructor(table: TTable, set: MySqlUpdateSet, session: MySqlSession, dialect: MySqlDialect);
    where(where: SQL | undefined): Omit<this, 'where'>;
    toSQL(): Query;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: MySqlRawQueryResult;
    }>;
    execute: ReturnType<this['prepare']>['execute'];
}
//# sourceMappingURL=update.d.ts.map