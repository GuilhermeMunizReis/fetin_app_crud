import { QueryPromise } from 'drizzle-orm/query-promise';
import { Param, Placeholder, Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { MySqlDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { MySqlRawQueryResult, MySqlSession, PreparedQuery, PreparedQueryConfig } from '../session';
import { AnyMySqlTable, InferModel } from '../table';
import { MySqlUpdateSetSource } from './update';
export interface MySqlInsertConfig<TTable extends AnyMySqlTable = AnyMySqlTable> {
    table: TTable;
    values: Record<string, Param | SQL>[];
    onConflict?: SQL;
    returning?: SelectFieldsOrdered;
}
export declare type AnyMySqlInsertConfig = MySqlInsertConfig<AnyMySqlTable>;
export declare type MySqlInsertValue<TTable extends AnyMySqlTable> = {
    [Key in keyof InferModel<TTable, 'insert'>]: InferModel<TTable, 'insert'>[Key] | SQL | Placeholder;
};
export declare class MySqlInsertBuilder<TTable extends AnyMySqlTable> {
    private table;
    private session;
    private dialect;
    constructor(table: TTable, session: MySqlSession, dialect: MySqlDialect);
    values(...values: MySqlInsertValue<TTable>[]): MySqlInsert<TTable>;
}
export interface MySqlInsert<TTable extends AnyMySqlTable, TReturning = undefined> extends QueryPromise<MySqlRawQueryResult>, SQLWrapper {
}
export declare class MySqlInsert<TTable extends AnyMySqlTable, TReturning = undefined> extends QueryPromise<MySqlRawQueryResult> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    protected $return: TReturning;
    private config;
    constructor(table: TTable, values: MySqlInsertConfig['values'], session: MySqlSession, dialect: MySqlDialect);
    onDuplicateKeyUpdate(config: {
        set: MySqlUpdateSetSource<TTable>;
    }): this;
    toSQL(): Query;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: MySqlRawQueryResult;
    }>;
    execute: ReturnType<this['prepare']>['execute'];
}
//# sourceMappingURL=insert.d.ts.map