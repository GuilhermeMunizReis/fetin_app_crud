"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlSelect = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const query_promise_1 = require("drizzle-orm/query-promise");
const utils_1 = require("../utils");
class MySqlSelect extends query_promise_1.QueryPromise {
    constructor(table, fields, session, dialect) {
        super();
        this.session = session;
        this.dialect = dialect;
        this.isPartialSelect = false;
        this.leftJoin = this.createJoin('left');
        this.rightJoin = this.createJoin('right');
        this.innerJoin = this.createJoin('inner');
        this.fullJoin = this.createJoin('full');
        this.execute = (placeholderValues) => {
            return this._prepare().execute(placeholderValues);
        };
        this.config = {
            table,
            fields,
            joins: {},
            orderBy: [],
            groupBy: [],
        };
        this.joinsNotNullable = { [table[drizzle_orm_1.Table.Symbol.Name]]: true };
    }
    createJoin(joinType) {
        return (table, on) => {
            const tableName = table[drizzle_orm_1.Table.Symbol.Name];
            if (!this.isPartialSelect) {
                // If this is the first join and this is not a partial select, "move" the fields from the main table to the nested object
                if (Object.keys(this.joinsNotNullable).length === 1) {
                    this.config.fields = this.config.fields.map((field) => (Object.assign(Object.assign({}, field), { path: [this.config.table[drizzle_orm_1.Table.Symbol.Name], ...field.path] })));
                }
                this.config.fields.push(...(0, utils_1.orderSelectedFields)(table[drizzle_orm_1.Table.Symbol.Columns], [tableName]));
            }
            this.config.joins[tableName] = { on, table, joinType };
            switch (joinType) {
                case 'left':
                    this.joinsNotNullable[tableName] = false;
                    break;
                case 'right':
                    this.joinsNotNullable = Object.fromEntries(Object.entries(this.joinsNotNullable).map(([key]) => [key, false]));
                    this.joinsNotNullable[tableName] = true;
                    break;
                case 'inner':
                    this.joinsNotNullable = Object.fromEntries(Object.entries(this.joinsNotNullable).map(([key]) => [key, true]));
                    this.joinsNotNullable[tableName] = true;
                    break;
                case 'full':
                    this.joinsNotNullable = Object.fromEntries(Object.entries(this.joinsNotNullable).map(([key]) => [key, false]));
                    this.joinsNotNullable[tableName] = false;
                    break;
            }
            return this;
        };
    }
    fields(fields) {
        this.config.fields = (0, utils_1.orderSelectedFields)(fields);
        this.isPartialSelect = true;
        return this;
    }
    where(where) {
        this.config.where = where;
        return this;
    }
    groupBy(...columns) {
        this.config.groupBy = columns;
        return this;
    }
    orderBy(...columns) {
        this.config.orderBy = columns;
        return this;
    }
    limit(limit) {
        this.config.limit = limit;
        return this;
    }
    offset(offset) {
        this.config.offset = offset;
        return this;
    }
    /** @internal */
    getSQL() {
        return this.dialect.buildSelectQuery(this.config);
    }
    toSQL() {
        return this.dialect.sqlToQuery(this.getSQL());
    }
    _prepare(name) {
        return this.session.prepareQuery(this.toSQL(), this.config.fields, name);
    }
    prepare(name) {
        return this._prepare(name);
    }
}
exports.MySqlSelect = MySqlSelect;
//# sourceMappingURL=select.js.map