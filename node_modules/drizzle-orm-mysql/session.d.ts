import { Query, SQL } from 'drizzle-orm/sql';
import { FieldPacket, OkPacket, ResultSetHeader, RowDataPacket } from 'mysql2/promise';
import { MySqlDialect } from './dialect';
import { SelectFieldsOrdered } from './operations';
export declare type MySqlRawQueryResult = [ResultSetHeader, FieldPacket[]];
export declare type MySqlQueryResultType = RowDataPacket[][] | RowDataPacket[] | OkPacket | OkPacket[] | ResultSetHeader;
export declare type MySqlQueryResult<T = any> = [T extends ResultSetHeader ? T : T[], FieldPacket[]];
export interface PreparedQueryConfig {
    execute: unknown;
    all: unknown;
    values: unknown;
}
export declare abstract class PreparedQuery<T extends PreparedQueryConfig> {
    abstract execute(placeholderValues?: Record<string, unknown>): Promise<T['execute']>;
}
export declare abstract class MySqlSession {
    protected dialect: MySqlDialect;
    constructor(dialect: MySqlDialect);
    abstract prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    execute<T>(query: SQL): Promise<T>;
    all<T = unknown>(query: SQL): Promise<T[]>;
}
//# sourceMappingURL=session.d.ts.map