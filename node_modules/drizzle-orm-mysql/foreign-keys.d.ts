import { AnyMySqlColumn } from './columns';
import { AnyMySqlTable } from './table';
export declare type UpdateDeleteAction = 'cascade' | 'restrict' | 'no action' | 'set null' | 'set default';
export declare type Reference = () => {
    readonly columns: AnyMySqlColumn[];
    readonly foreignTable: AnyMySqlTable;
    readonly foreignColumns: AnyMySqlColumn[];
};
export declare class ForeignKeyBuilder {
    protected $brand: 'MySqlForeignKeyBuilder';
    constructor(config: () => {
        columns: AnyMySqlColumn[];
        foreignColumns: AnyMySqlColumn[];
    }, actions?: {
        onUpdate?: UpdateDeleteAction;
        onDelete?: UpdateDeleteAction;
    } | undefined);
    onUpdate(action: UpdateDeleteAction): this;
    onDelete(action: UpdateDeleteAction): this;
}
export declare type AnyForeignKeyBuilder = ForeignKeyBuilder;
export declare class ForeignKey {
    readonly table: AnyMySqlTable;
    readonly reference: Reference;
    readonly onUpdate: UpdateDeleteAction | undefined;
    readonly onDelete: UpdateDeleteAction | undefined;
    constructor(table: AnyMySqlTable, builder: ForeignKeyBuilder);
    getName(): string;
}
declare type ColumnsWithTable<TTableName extends string, TColumns extends AnyMySqlColumn[]> = {
    [Key in keyof TColumns]: AnyMySqlColumn<{
        tableName: TTableName;
    }>;
};
export declare type GetColumnsTable<TColumns extends AnyMySqlColumn | AnyMySqlColumn[]> = (TColumns extends AnyMySqlColumn ? TColumns : TColumns extends AnyMySqlColumn[] ? TColumns[number] : never) extends AnyMySqlColumn<{
    tableName: infer TTableName extends string;
}> ? TTableName : never;
export declare function foreignKey<TTableName extends string, TForeignTableName extends string, TColumns extends [AnyMySqlColumn<{
    tableName: TTableName;
}>, ...AnyMySqlColumn<{
    tableName: TTableName;
}>[]]>(config: {
    columns: TColumns;
    foreignColumns: ColumnsWithTable<TForeignTableName, TColumns>;
}): ForeignKeyBuilder;
export {};
//# sourceMappingURL=foreign-keys.d.ts.map