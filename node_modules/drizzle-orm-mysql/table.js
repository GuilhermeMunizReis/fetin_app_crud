"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.mysqlTable = exports.mysqlTableWithSchema = exports.mysqlSchema = exports.mysqlDatabase = exports.isMySqlSchema = exports.MySqlTable = exports.ExtraConfig = exports.Checks = exports.ForeignKeys = exports.Indexes = void 0;
const table_1 = require("drizzle-orm/table");
/** @internal */
exports.Indexes = Symbol('Indexes');
/** @internal */
exports.ForeignKeys = Symbol('ForeignKeys');
/** @internal */
exports.Checks = Symbol('Checks');
/** @internal */
exports.ExtraConfig = Symbol('ExtraConfig');
class MySqlTable extends table_1.Table {
    constructor() {
        super(...arguments);
        /** @internal */
        this[_a] = {};
        /** @internal */
        this[_b] = {};
        /** @internal */
        this[_c] = {};
        /** @internal */
        this[_d] = undefined;
    }
}
exports.MySqlTable = MySqlTable;
table_1.Table.Symbol.Columns, _a = exports.Indexes, _b = exports.ForeignKeys, _c = exports.Checks, _d = exports.ExtraConfig;
/** @internal */
MySqlTable.Symbol = Object.assign(table_1.Table.Symbol, {
    Indexes: exports.Indexes,
    ForeignKeys: exports.ForeignKeys,
    Checks: exports.Checks,
    ExtraConfig: exports.ExtraConfig,
});
const isMySqlSchemaSym = Symbol('isMySqlSchema');
function isMySqlSchema(obj) {
    return !!obj && typeof obj === 'function' && isMySqlSchemaSym in obj;
}
exports.isMySqlSchema = isMySqlSchema;
/**
 * mysqlDatabase is same as {@link mysqlSchema} function
 *
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param databaseName - mysql use database name
 * @returns
 */
function mysqlDatabase(databaseName) {
    return mysqlSchema(databaseName);
}
exports.mysqlDatabase = mysqlDatabase;
/**
 * mysqlSchema is same as {@link mysqlDatabase} function
 *
 * https://dev.mysql.com/doc/refman/8.0/en/create-database.html
 *
 * @param schemaName - mysql use schema name
 * @returns
 */
function mysqlSchema(schemaName) {
    const schemaValue = {
        schemaName,
        [isMySqlSchemaSym]: true,
    };
    const columnFactory = (name, columns, extraConfig) => mysqlTableWithSchema(name, columns, schemaName, extraConfig);
    return Object.assign(columnFactory, schemaValue);
}
exports.mysqlSchema = mysqlSchema;
function mysqlTableWithSchema(name, columns, schema, extraConfig) {
    const rawTable = new MySqlTable(name, schema);
    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilder]) => {
        const column = colBuilder.build(rawTable);
        colBuilder.buildForeignKeys(column, rawTable).forEach((fk, fkIndex) => {
            rawTable[exports.ForeignKeys][Symbol(`${name}_${fkIndex}`)] = fk;
        });
        return [name, column];
    }));
    rawTable[MySqlTable.Symbol.Columns] = builtColumns;
    const table = Object.assign(rawTable, builtColumns);
    table[MySqlTable.Symbol.Columns] = builtColumns;
    if (extraConfig) {
        table[MySqlTable.Symbol.ExtraConfig] = extraConfig;
    }
    return table;
}
exports.mysqlTableWithSchema = mysqlTableWithSchema;
function mysqlTable(name, columns, extraConfig) {
    return mysqlTableWithSchema(name, columns, undefined, extraConfig);
}
exports.mysqlTable = mysqlTable;
//# sourceMappingURL=table.js.map