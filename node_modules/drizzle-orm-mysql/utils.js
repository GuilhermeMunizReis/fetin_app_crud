"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderSelectedFields = exports.mapUpdateSet = exports.getTableChecks = exports.getTableForeignKeys = exports.getTableIndexes = exports.getTableColumns = exports.getTableConfig = exports.tableChecks = exports.tableForeignKeys = exports.tableIndexes = void 0;
const table_1 = require("./table");
const sql_1 = require("drizzle-orm/sql");
const common_1 = require("./columns/common");
const table_2 = require("drizzle-orm/table");
const indexes_1 = require("./indexes");
const checks_1 = require("./checks");
const foreign_keys_1 = require("./foreign-keys");
/** @internal */
exports.tableIndexes = Symbol('tableIndexes');
/** @internal */
exports.tableForeignKeys = Symbol('tableForeignKeys');
/** @internal */
exports.tableChecks = Symbol('tableChecks');
function getTableConfig(table) {
    const columns = getTableColumns(table);
    const indexes = [];
    const checks = [];
    const foreignKeys = getTableForeignKeys(table);
    const name = table[table_2.Table.Symbol.Name];
    const schema = table[table_2.Table.Symbol.Schema];
    const extraConfig = table[table_1.MySqlTable.Symbol.ExtraConfig];
    if (typeof extraConfig === 'undefined') {
        return {
            columns,
            indexes,
            foreignKeys,
            checks,
            name,
            schema
        };
    }
    const builtConfig = extraConfig(table[table_1.MySqlTable.Symbol.Columns]);
    Object.entries(builtConfig).forEach(([_, builder]) => {
        if (builder instanceof indexes_1.IndexBuilder) {
            indexes.push(builder.build(table));
        }
        else if (builder instanceof checks_1.CheckBuilder) {
            checks.push(builder.build(table));
        }
        else if (builder instanceof foreign_keys_1.ForeignKeyBuilder) {
            foreignKeys.push(builder.build(table));
        }
    });
    return {
        columns: getTableColumns(table),
        indexes,
        foreignKeys,
        checks,
        name,
        schema
    };
}
exports.getTableConfig = getTableConfig;
function getTableColumns(table) {
    const columns = table[table_1.MySqlTable.Symbol.Columns];
    const keys = Reflect.ownKeys(columns);
    return keys.map((key) => columns[key]);
}
exports.getTableColumns = getTableColumns;
function getTableIndexes(table) {
    const indexes = table[table_1.MySqlTable.Symbol.Indexes];
    const keys = Reflect.ownKeys(indexes);
    return keys.map((key) => indexes[key]);
}
exports.getTableIndexes = getTableIndexes;
function getTableForeignKeys(table) {
    const foreignKeys = table[table_1.MySqlTable.Symbol.ForeignKeys];
    const keys = Reflect.ownKeys(foreignKeys);
    return keys.map((key) => foreignKeys[key]);
}
exports.getTableForeignKeys = getTableForeignKeys;
function getTableChecks(table) {
    const checks = table[table_1.MySqlTable.Symbol.Checks];
    const keys = Reflect.ownKeys(checks);
    return keys.map((key) => checks[key]);
}
exports.getTableChecks = getTableChecks;
/** @internal */
function mapUpdateSet(table, values) {
    return Object.fromEntries(Object.entries(values).map(([key, value]) => {
        if (value instanceof sql_1.SQL || value === null || value === undefined) {
            return [key, value];
        }
        else {
            return [key, new sql_1.Param(value, table[table_1.MySqlTable.Symbol.Columns][key])];
        }
    }));
}
exports.mapUpdateSet = mapUpdateSet;
function orderSelectedFields(fields, pathPrefix) {
    return Object.entries(fields).reduce((result, [name, field]) => {
        if (typeof name !== 'string') {
            return result;
        }
        const newPath = pathPrefix ? [...pathPrefix, name] : [name];
        if (field instanceof common_1.MySqlColumn
            || field instanceof sql_1.SQL
            || field instanceof sql_1.SQLResponse) {
            result.push({ path: newPath, field });
        }
        else if (field instanceof table_1.MySqlTable) {
            result.push(...orderSelectedFields(field[table_2.Table.Symbol.Columns], newPath));
        }
        else {
            result.push(...orderSelectedFields(field, newPath));
        }
        return result;
    }, []);
}
exports.orderSelectedFields = orderSelectedFields;
//# sourceMappingURL=utils.js.map