"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySql2Session = exports.MySql2PreparedQuery = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const sql_1 = require("drizzle-orm/sql");
const utils_1 = require("drizzle-orm/utils");
const session_1 = require("../session");
class MySql2PreparedQuery extends session_1.PreparedQuery {
    constructor(client, queryString, params, logger, fields, name) {
        super();
        this.client = client;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.rawQuery = {
            sql: queryString,
            // rowsAsArray: true,
            typeCast: function (field, next) {
                if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {
                    return field.string();
                }
                return next();
            },
        };
        this.query = {
            sql: queryString,
            rowsAsArray: true,
            typeCast: function (field, next) {
                if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {
                    return field.string();
                }
                return next();
            },
        };
    }
    execute(placeholderValues = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
            this.logger.logQuery(this.rawQuery.sql, params);
            const { fields } = this;
            if (!fields) {
                return this.client.query(this.rawQuery, params);
            }
            const result = this.client.query(this.query, params);
            return result.then((result) => result[0].map((row) => (0, utils_1.mapResultRow)(fields, row)));
        });
    }
    all(placeholderValues = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
            this.logger.logQuery(this.rawQuery.sql, params);
            return this.client.query(this.rawQuery, params).then((result) => result[0]);
        });
    }
}
exports.MySql2PreparedQuery = MySql2PreparedQuery;
class MySql2Session extends session_1.MySqlSession {
    constructor(client, dialect, options = {}) {
        var _a;
        super(dialect);
        this.client = client;
        this.logger = (_a = options.logger) !== null && _a !== void 0 ? _a : new drizzle_orm_1.NoopLogger();
    }
    prepareQuery(query, fields, name) {
        return new MySql2PreparedQuery(this.client, query.sql, query.params, this.logger, fields, name);
    }
    query(query, params) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.logQuery(query, params);
            const result = yield this.client.query({
                sql: query,
                values: params,
                rowsAsArray: true,
                typeCast: function (field, next) {
                    if (field.type === 'TIMESTAMP' || field.type === 'DATETIME' || field.type === 'DATE') {
                        console.log('fields', field);
                        return field.string();
                    }
                    return next();
                },
            });
            return result;
        });
    }
    queryObjects(query, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.query(query, params);
        });
    }
}
exports.MySql2Session = MySql2Session;
//# sourceMappingURL=session.js.map