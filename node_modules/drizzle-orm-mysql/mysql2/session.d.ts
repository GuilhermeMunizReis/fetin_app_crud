import { Logger } from 'drizzle-orm';
import { Query } from 'drizzle-orm/sql';
import { Connection, Pool } from 'mysql2/promise';
import { MySqlDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { MySqlQueryResult, MySqlQueryResultType, MySqlSession, PreparedQuery, PreparedQueryConfig } from '../session';
export declare type MySql2Client = Pool | Connection;
export declare class MySql2PreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: MySql2Client, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
}
export interface NodePgSessionOptions {
    logger?: Logger;
}
export declare class MySql2Session extends MySqlSession {
    private client;
    private logger;
    constructor(client: MySql2Client, dialect: MySqlDialect, options?: NodePgSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<MySqlQueryResult>;
    queryObjects<T extends MySqlQueryResultType = MySqlQueryResultType>(query: string, params: unknown[]): Promise<MySqlQueryResult>;
}
//# sourceMappingURL=session.d.ts.map