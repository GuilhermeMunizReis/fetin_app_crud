import { ColumnBuilderBaseConfig, UpdateCBConfig } from 'drizzle-orm/column-builder';
import { SQL } from 'drizzle-orm/sql';
import { MySqlColumnBuilder } from './common';
export declare abstract class MySqlDateColumnBaseBuilder<T extends ColumnBuilderBaseConfig, TConfig extends Record<string, unknown> = {}> extends MySqlColumnBuilder<T, TConfig> {
    hasOnUpdateNow: boolean;
    notNull(): MySqlDateColumnBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): MySqlDateColumnBaseBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): MySqlDateColumnBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    defaultNow(): MySqlDateColumnBaseBuilder<import("drizzle-orm/utils").Simplify<Pick<T, Exclude<keyof T, "hasDefault">> & {
        hasDefault: true;
    }, {}>, {}>;
    onUpdateNow(): MySqlDateColumnBaseBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
}
//# sourceMappingURL=date.common.d.ts.map