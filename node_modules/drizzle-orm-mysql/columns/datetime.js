"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.datetime = exports.MySqlDateTimeString = exports.MySqlDateTimeStringBuilder = exports.MySqlDateTime = exports.MySqlDateTimeBuilder = void 0;
const common_1 = require("./common");
class MySqlDateTimeBuilder extends common_1.MySqlColumnBuilder {
    constructor(name, fsp) {
        super(name);
        this.config.fsp = fsp;
    }
    /** @internal */
    build(table) {
        return new MySqlDateTime(table, this.config);
    }
}
exports.MySqlDateTimeBuilder = MySqlDateTimeBuilder;
class MySqlDateTime extends common_1.MySqlColumn {
    constructor(table, config) {
        super(table, config);
        this.fsp = config.fsp;
    }
    getSQLType() {
        const precision = typeof this.fsp !== 'undefined' ? ` (${this.fsp})` : '';
        return `datetime${precision}`;
    }
    mapFromDriverValue(value) {
        return new Date(value);
    }
}
exports.MySqlDateTime = MySqlDateTime;
class MySqlDateTimeStringBuilder extends common_1.MySqlColumnBuilder {
    constructor(name, fsp) {
        super(name);
        this.config.fsp = fsp;
    }
    /** @internal */
    build(table) {
        return new MySqlDateTimeString(table, this.config);
    }
}
exports.MySqlDateTimeStringBuilder = MySqlDateTimeStringBuilder;
class MySqlDateTimeString extends common_1.MySqlColumn {
    constructor(table, config) {
        super(table, config);
        this.fsp = config.fsp;
    }
    getSQLType() {
        const precision = typeof this.fsp !== 'undefined' ? ` (${this.fsp})` : '';
        return `datetime${precision}`;
    }
}
exports.MySqlDateTimeString = MySqlDateTimeString;
function datetime(name, config) {
    if ((config === null || config === void 0 ? void 0 : config.mode) === 'string') {
        return new MySqlDateTimeStringBuilder(name, config.fsp);
    }
    return new MySqlDateTimeBuilder(name, config === null || config === void 0 ? void 0 : config.fsp);
}
exports.datetime = datetime;
//# sourceMappingURL=datetime.js.map