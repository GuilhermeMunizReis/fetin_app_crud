import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { AnyMySqlTable } from '../table';
import { MySqlColumn, MySqlColumnBuilder } from './common';
export declare type MySqlTextColumnType = 'tinytext' | 'text' | 'mediumtext' | 'longtext';
export declare class MySqlTextBuilder<TTextType extends MySqlTextColumnType = 'text', TData extends string = string> extends MySqlColumnBuilder<ColumnBuilderConfig<{
    data: TData;
    driverParam: number | string;
}>, {
    textType: TTextType;
}> {
    constructor(name: string, textType: TTextType);
}
export declare class MySqlText<TTableName extends string, TTextType extends MySqlTextColumnType, TData extends string> extends MySqlColumn<ColumnConfig<{
    tableName: TTableName;
    data: TData;
    driverParam: number | string;
}>> {
    protected $mySqlColumnBrand: 'MySqlText';
    private textType;
    constructor(table: AnyMySqlTable<{
        name: TTableName;
    }>, config: MySqlTextBuilder<TTextType, TData>['config']);
    getSQLType(): string;
}
export declare function text<T extends string = string>(name: string): MySqlTextBuilder<'text', T>;
export declare function tinytext<T extends string = string>(name: string): MySqlTextBuilder<'tinytext', T>;
export declare function mediumtext<T extends string = string>(name: string): MySqlTextBuilder<'mediumtext', T>;
export declare function longtext<T extends string = string>(name: string): MySqlTextBuilder<'longtext', T>;
//# sourceMappingURL=text.d.ts.map