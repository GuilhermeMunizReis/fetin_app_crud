import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { AnyMySqlTable } from '../table';
import { MySqlColumn, MySqlColumnBuilder } from './common';
export declare class MySqlVarBinaryBuilder extends MySqlColumnBuilder<ColumnBuilderConfig<{
    data: number;
    driverParam: number | string;
}>, {
    length: number | undefined;
}> {
}
export declare class MySqlVarBinary<TTableName extends string> extends MySqlColumn<ColumnConfig<{
    tableName: TTableName;
    data: number;
    driverParam: number | string;
}>> {
    protected $mySqlColumnBrand: 'MySqlVarBinary';
    length: number | undefined;
    constructor(table: AnyMySqlTable<{
        name: TTableName;
    }>, config: MySqlVarBinaryBuilder['config']);
    getSQLType(): string;
}
export interface MySqlVarbinaryOptions {
    length: number;
}
export declare function varbinary(name: string, options: MySqlVarbinaryOptions): MySqlVarBinaryBuilder;
//# sourceMappingURL=varbinary.d.ts.map