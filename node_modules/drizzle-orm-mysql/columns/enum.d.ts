import { Update } from 'drizzle-orm/utils';
import { AnyMySqlTable } from '../table';
import { MySqlColumn, MySqlColumnBuilder } from './common';
export interface MySqlEnumColumnBuilderConfig {
    notNull: boolean;
    hasDefault: boolean;
    values: [string, ...string[]];
}
export interface MySqlEnumColumnConfig extends MySqlEnumColumnBuilderConfig {
    tableName: string;
}
export declare class MySqlEnumColumnBuilder<T extends MySqlEnumColumnBuilderConfig = MySqlEnumColumnBuilderConfig> extends MySqlColumnBuilder<{
    data: T['values'][number];
    driverParam: string;
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
}, {
    values: T['values'];
}> {
    constructor(name: string, values: T['values']);
}
export declare class MySqlEnumColumn<T extends MySqlEnumColumnConfig> extends MySqlColumn<{
    tableName: T['tableName'];
    data: T['values'][number];
    driverParam: string;
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
}> {
    protected $mySqlColumnBrand: 'MySqlEnumColumn';
    readonly values: T['values'];
    constructor(table: AnyMySqlTable<{
        name: T['tableName'];
    }>, config: MySqlEnumColumnBuilder<Pick<T, keyof MySqlEnumColumnBuilderConfig>>['config']);
    getSQLType(): string;
}
export declare function mysqlEnum<U extends string, T extends Readonly<[U, ...U[]]>>(name: string, values: T): MySqlEnumColumnBuilder<Update<MySqlEnumColumnBuilderConfig, {
    notNull: false;
    hasDefault: false;
    values: Writeable<T>;
}>>;
export declare type Writeable<T> = {
    -readonly [P in keyof T]: T[P];
};
//# sourceMappingURL=enum.d.ts.map