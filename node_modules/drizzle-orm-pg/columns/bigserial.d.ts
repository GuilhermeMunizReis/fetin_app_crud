import { PgColumn, PgColumnBuilder } from './common';
export declare class PgBigSerial53Builder extends PgColumnBuilder<{
    data: number;
    driverParam: number;
    notNull: true;
    hasDefault: true;
}> {
    constructor(name: string);
    protected $pgColumnBuilderBrand: 'PgBigSerial53Builder';
}
export declare class PgBigSerial53<TTableName extends string> extends PgColumn<{
    tableName: TTableName;
    data: number;
    driverParam: number;
    notNull: true;
    hasDefault: true;
}> {
    protected $pgColumnBrand: 'PgBigSerial53';
    getSQLType(): string;
    mapFromDriverValue(value: number): number;
}
export declare class PgBigSerial64Builder extends PgColumnBuilder<{
    data: bigint;
    driverParam: string;
    notNull: true;
    hasDefault: true;
}> {
    constructor(name: string);
    protected $pgColumnBuilderBrand: 'PgBigSerial64Builder';
}
export declare class PgBigSerial64<TTableName extends string> extends PgColumn<{
    tableName: TTableName;
    data: bigint;
    driverParam: string;
    notNull: true;
    hasDefault: true;
}> {
    protected $pgColumnBrand: 'PgBigSerial64';
    getSQLType(): string;
    mapFromDriverValue(value: string): bigint;
}
interface PgBigSerialConfig<T extends 'number' | 'bigint' = 'number' | 'bigint'> {
    mode: T;
}
export declare function bigserial(name: string, config: PgBigSerialConfig<'number'>): PgBigSerial53Builder;
export declare function bigserial(name: string, config: PgBigSerialConfig<'bigint'>): PgBigSerial64Builder;
export {};
//# sourceMappingURL=bigserial.d.ts.map