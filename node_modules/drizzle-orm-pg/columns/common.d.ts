import { Column, ColumnBaseConfig } from 'drizzle-orm';
import { ColumnBuilder, ColumnBuilderBaseConfig, ColumnBuilderWithConfig, UpdateCBConfig } from 'drizzle-orm/column-builder';
import { SQL } from 'drizzle-orm/sql';
import { Update } from 'drizzle-orm/utils';
import { Simplify } from 'drizzle-orm/utils';
import { UpdateDeleteAction } from '../foreign-keys';
import { AnyPgTable } from '../table';
import { PgEnumColumn, PgEnumColumnBuilder } from './enum';
import { PgText, PgTextBuilder } from './text';
export interface ReferenceConfig {
    ref: () => AnyPgColumn;
    actions: {
        onUpdate?: UpdateDeleteAction;
        onDelete?: UpdateDeleteAction;
    };
}
export declare abstract class PgColumnBuilder<T extends Partial<ColumnBuilderBaseConfig>, TConfig extends Record<string, unknown> = {}> extends ColumnBuilder<T, TConfig> {
    protected abstract $pgColumnBuilderBrand: string;
    private foreignKeyConfigs;
    constructor(name: string);
    notNull(): PgColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): PgColumnBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): PgColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    references(ref: ReferenceConfig['ref'], actions?: ReferenceConfig['actions']): this;
}
export declare type AnyPgColumnBuilder<TPartial extends Partial<ColumnBuilderBaseConfig> = {}> = PgColumnBuilder<Update<ColumnBuilderBaseConfig, TPartial>>;
export declare abstract class PgColumn<T extends Partial<ColumnBaseConfig>> extends Column<T> {
    readonly table: AnyPgTable<{
        name: T['tableName'];
    }>;
    protected $pgBrand: 'PgColumn';
    protected abstract $pgColumnBrand: string;
    constructor(table: AnyPgTable<{
        name: T['tableName'];
    }>, config: PgColumnBuilder<Omit<T, 'tableName'>>['config']);
    unsafe(): AnyPgColumn;
}
export declare type AnyPgColumn<TPartial extends Partial<ColumnBaseConfig> = {}> = PgColumn<Update<ColumnBaseConfig, TPartial>>;
export declare type BuildColumn<TTableName extends string, TBuilder extends AnyPgColumnBuilder> = TBuilder extends PgTextBuilder<infer T> ? PgText<Simplify<T & {
    tableName: TTableName;
}>> : TBuilder extends PgEnumColumnBuilder<infer T> ? PgEnumColumn<Simplify<T & {
    tableName: TTableName;
}>> : TBuilder extends ColumnBuilderWithConfig<infer T> ? PgColumn<Simplify<T & {
    tableName: TTableName;
}>> : never;
export declare type BuildColumns<TTableName extends string, TConfigMap extends Record<string, AnyPgColumnBuilder>> = Simplify<{
    [Key in keyof TConfigMap]: BuildColumn<TTableName, TConfigMap[Key]>;
}>;
export declare type ChangeColumnTableName<TColumn extends AnyPgColumn, TAlias extends string> = TColumn extends PgColumn<infer T> ? PgColumn<Simplify<Omit<T, 'tableName'> & {
    tableName: TAlias;
}>> : never;
//# sourceMappingURL=common.d.ts.map