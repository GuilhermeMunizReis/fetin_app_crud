"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timestamp = exports.PgTimestampString = exports.PgTimestampStringBuilder = exports.PgTimestamp = exports.PgTimestampBuilder = void 0;
const common_1 = require("./common");
const date_common_1 = require("./date.common");
class PgTimestampBuilder extends date_common_1.PgDateColumnBaseBuilder {
    constructor(name, withTimezone, precision) {
        super(name);
        this.config.withTimezone = withTimezone;
        this.config.precision = precision;
    }
    /** @internal */
    build(table) {
        return new PgTimestamp(table, this.config);
    }
}
exports.PgTimestampBuilder = PgTimestampBuilder;
class PgTimestamp extends common_1.PgColumn {
    constructor(table, config) {
        super(table, config);
        this.mapFromDriverValue = (value) => {
            return new Date(value);
        };
        this.withTimezone = config.withTimezone;
        this.precision = config.precision;
    }
    getSQLType() {
        const precision = typeof this.precision !== 'undefined' ? ` (${this.precision})` : '';
        return `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;
    }
}
exports.PgTimestamp = PgTimestamp;
class PgTimestampStringBuilder extends date_common_1.PgDateColumnBaseBuilder {
    constructor(name, withTimezone, precision) {
        super(name);
        this.config.withTimezone = withTimezone;
        this.config.precision = precision;
    }
    /** @internal */
    build(table) {
        return new PgTimestampString(table, this.config);
    }
}
exports.PgTimestampStringBuilder = PgTimestampStringBuilder;
class PgTimestampString extends common_1.PgColumn {
    constructor(table, config) {
        super(table, config);
        this.withTimezone = config.withTimezone;
        this.precision = config.precision;
    }
    getSQLType() {
        const precision = typeof this.precision !== 'undefined' ? ` (${this.precision})` : '';
        return `timestamp${precision}${this.withTimezone ? ' with time zone' : ''}`;
    }
}
exports.PgTimestampString = PgTimestampString;
function timestamp(name, config) {
    var _a, _b;
    if ((config === null || config === void 0 ? void 0 : config.mode) === 'string') {
        return new PgTimestampStringBuilder(name, (_a = config.withTimezone) !== null && _a !== void 0 ? _a : false, config.precision);
    }
    return new PgTimestampBuilder(name, (_b = config === null || config === void 0 ? void 0 : config.withTimezone) !== null && _b !== void 0 ? _b : false, config === null || config === void 0 ? void 0 : config.precision);
}
exports.timestamp = timestamp;
//# sourceMappingURL=timestamp.js.map