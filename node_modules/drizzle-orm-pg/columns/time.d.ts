import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { AnyPgTable } from '../table';
import { PgColumn } from './common';
import { PgDateColumnBaseBuilder } from './date.common';
import { Precision } from './timestamp';
export declare class PgTimeBuilder<TData extends string = string> extends PgDateColumnBaseBuilder<ColumnBuilderConfig<{
    data: TData;
    driverParam: string;
}>, {
    withTimezone: boolean;
    precision: number | undefined;
}> {
    readonly withTimezone: boolean;
    readonly precision: number | undefined;
    protected $pgColumnBuilderBrand: 'PgTimeBuilder';
    constructor(name: string, withTimezone: boolean, precision: number | undefined);
}
export declare class PgTime<TTableName extends string, TData extends string> extends PgColumn<ColumnConfig<{
    tableName: TTableName;
    data: TData;
    driverParam: string;
}>> {
    protected $pgColumnBrand: 'PgTime';
    readonly withTimezone: boolean;
    readonly precision: number | undefined;
    constructor(table: AnyPgTable<{
        name: TTableName;
    }>, config: PgTimeBuilder<TData>['config']);
    getSQLType(): string;
}
export interface TimeConfig {
    precision?: Precision;
    withTimezone?: boolean;
}
export declare function time(name: string, config?: TimeConfig): PgTimeBuilder<string>;
//# sourceMappingURL=time.d.ts.map