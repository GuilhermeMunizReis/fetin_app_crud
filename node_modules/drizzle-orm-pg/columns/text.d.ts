import { UpdateCBConfig } from 'drizzle-orm/column-builder';
import { SQL } from 'drizzle-orm/sql';
import { PgColumn, PgColumnBuilder } from './common';
export interface PgTextBuilderConfig {
    notNull: boolean;
    hasDefault: boolean;
    data: string;
}
export interface PgTextConfig extends PgTextBuilderConfig {
    tableName: string;
}
export declare class PgTextBuilder<T extends PgTextBuilderConfig> extends PgColumnBuilder<{
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
    data: T['data'];
    driverParam: string;
}> {
    protected $pgColumnBuilderBrand: 'PgTextBuilder';
    notNull(): PgTextBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): PgTextBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): PgTextBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
}
export declare class PgText<T extends PgTextConfig> extends PgColumn<{
    tableName: T['tableName'];
    data: T['data'];
    driverParam: string;
    notNull: T['notNull'];
    hasDefault: T['hasDefault'];
}> {
    protected $pgColumnBrand: 'PgText';
    getSQLType(): string;
}
export declare function text<T extends string = string>(name: string): PgTextBuilder<{
    hasDefault: false;
    notNull: false;
    data: T;
}>;
//# sourceMappingURL=text.d.ts.map