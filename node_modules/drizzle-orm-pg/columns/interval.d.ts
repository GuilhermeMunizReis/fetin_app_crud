import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { AnyPgTable } from '../table';
import { PgColumn, PgColumnBuilder } from './common';
import { Precision } from './timestamp';
export declare class PgIntervalBuilder<TData extends string = string> extends PgColumnBuilder<ColumnBuilderConfig<{
    data: TData;
    driverParam: string;
}>, {
    intervalConfig: IntervalConfig;
}> {
    protected $pgColumnBuilderBrand: 'PgIntervalBuilder';
    constructor(name: string, intervalConfig: IntervalConfig);
}
export declare class PgInterval<TTableName extends string, TData extends string> extends PgColumn<ColumnConfig<{
    tableName: TTableName;
    data: TData;
    driverParam: string;
}>> {
    protected $pgColumnBrand: 'PgTime';
    readonly config: IntervalConfig;
    constructor(table: AnyPgTable<{
        name: TTableName;
    }>, config: PgIntervalBuilder<TData>['config']);
    getSQLType(): string;
}
export interface IntervalConfig {
    fields?: 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'year to month' | 'day to hour' | 'day to minute' | 'day to second' | 'hour to minute' | 'hour to second' | 'minute to second';
    precision?: Precision;
}
export declare function interval<T extends string = string>(name: string, config?: IntervalConfig): PgIntervalBuilder<T>;
//# sourceMappingURL=interval.d.ts.map