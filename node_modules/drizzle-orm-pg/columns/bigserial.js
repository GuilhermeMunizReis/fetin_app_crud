"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bigserial = exports.PgBigSerial64 = exports.PgBigSerial64Builder = exports.PgBigSerial53 = exports.PgBigSerial53Builder = void 0;
const common_1 = require("./common");
class PgBigSerial53Builder extends common_1.PgColumnBuilder {
    constructor(name) {
        super(name);
        this.config.hasDefault = true;
    }
    /** @internal */
    build(table) {
        return new PgBigSerial53(table, this.config);
    }
}
exports.PgBigSerial53Builder = PgBigSerial53Builder;
class PgBigSerial53 extends common_1.PgColumn {
    getSQLType() {
        return 'bigserial';
    }
    mapFromDriverValue(value) {
        if (typeof value === 'number') {
            return value;
        }
        return parseInt(value);
    }
}
exports.PgBigSerial53 = PgBigSerial53;
class PgBigSerial64Builder extends common_1.PgColumnBuilder {
    constructor(name) {
        super(name);
        this.config.hasDefault = true;
    }
    /** @internal */
    build(table) {
        return new PgBigSerial64(table, this.config);
    }
}
exports.PgBigSerial64Builder = PgBigSerial64Builder;
class PgBigSerial64 extends common_1.PgColumn {
    getSQLType() {
        return 'bigserial';
    }
    mapFromDriverValue(value) {
        return BigInt(value);
    }
}
exports.PgBigSerial64 = PgBigSerial64;
function bigserial(name, { mode }) {
    if (mode === 'number') {
        return new PgBigSerial53Builder(name);
    }
    return new PgBigSerial64Builder(name);
}
exports.bigserial = bigserial;
//# sourceMappingURL=bigserial.js.map