import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { AnyPgTable } from '../table';
import { PgColumn } from './common';
import { PgDateColumnBaseBuilder } from './date.common';
export declare class PgDateBuilder extends PgDateColumnBaseBuilder<ColumnBuilderConfig<{
    data: Date;
    driverParam: string;
}>> {
    protected $pgColumnBuilderBrand: 'PgDateBuilder';
}
export declare class PgDate<TTableName extends string> extends PgColumn<ColumnConfig<{
    tableName: TTableName;
    data: Date;
    driverParam: string;
}>> {
    protected $pgColumnBrand: 'PgDate';
    constructor(table: AnyPgTable<{
        name: TTableName;
    }>, config: PgDateBuilder['config']);
    getSQLType(): string;
    mapFromDriverValue(value: string): Date;
    mapToDriverValue(value: Date): string;
}
export declare class PgDateStringBuilder extends PgDateColumnBaseBuilder<ColumnBuilderConfig<{
    data: string;
    driverParam: string;
}>> {
    protected $pgColumnBuilderBrand: 'PgDateStringBuilder';
}
export declare class PgDateString<TTableName extends string> extends PgColumn<ColumnConfig<{
    tableName: TTableName;
    data: string;
    driverParam: string;
}>> {
    protected $pgColumnBrand: 'PgDateString';
    constructor(table: AnyPgTable<{
        name: TTableName;
    }>, config: PgDateStringBuilder['config']);
    getSQLType(): string;
}
export declare function date(name: string, config?: {
    mode: 'string';
}): PgDateStringBuilder;
export declare function date(name: string, config?: {
    mode: 'date';
}): PgDateBuilder;
//# sourceMappingURL=date.d.ts.map