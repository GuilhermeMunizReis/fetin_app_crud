import { QueryPromise } from 'drizzle-orm/query-promise';
import { Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { AnyPgColumn } from '../columns';
import { PgDialect } from '../dialect';
import { SelectFields } from '../operations';
import { PgSession, PreparedQuery, PreparedQueryConfig } from '../session';
import { AnyPgTable, GetTableConfig, InferModel } from '../table';
import { JoinFn, JoinNullability, JoinType, PgSelectConfig, SelectMode, SelectResult } from './select.types';
export interface PgSelect<TTable extends AnyPgTable, TResult = InferModel<TTable>, TSelectMode extends SelectMode = 'single', TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetTableConfig<TTable, 'name'>, 'not-null'>> extends QueryPromise<SelectResult<TResult, TSelectMode, TJoinsNotNullable>[]>, SQLWrapper {
}
export declare class PgSelect<TTable extends AnyPgTable, TResult = InferModel<TTable>, TSelectMode extends SelectMode = 'single', TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetTableConfig<TTable, 'name'>, 'not-null'>> extends QueryPromise<SelectResult<TResult, TSelectMode, TJoinsNotNullable>[]> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    protected $selectMode: TSelectMode;
    protected $result: TResult;
    private config;
    private isPartialSelect;
    private joinsNotNullable;
    constructor(table: PgSelectConfig['table'], fields: PgSelectConfig['fields'], session: PgSession, dialect: PgDialect);
    private createJoin;
    leftJoin: JoinFn<TTable, TSelectMode, "left", TResult, TJoinsNotNullable>;
    rightJoin: JoinFn<TTable, TSelectMode, "right", TResult, TJoinsNotNullable>;
    innerJoin: JoinFn<TTable, TSelectMode, "inner", TResult, TJoinsNotNullable>;
    fullJoin: JoinFn<TTable, TSelectMode, "full", TResult, TJoinsNotNullable>;
    fields<TSelect extends SelectFields>(fields: TSelect): Omit<PgSelect<TTable, TSelect, 'partial', TJoinsNotNullable>, 'fields'>;
    where(where: SQL | undefined): Omit<this, 'where' | `${JoinType}Join`>;
    groupBy(...columns: (AnyPgColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join`>;
    orderBy(...columns: SQL[]): Omit<this, 'where' | `${JoinType}Join` | 'orderBy'>;
    limit(limit: number): Omit<this, 'where' | `${JoinType}Join` | 'limit'>;
    offset(offset: number): Omit<this, 'where' | `${JoinType}Join` | 'offset'>;
    toSQL(): Query;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: SelectResult<TResult, TSelectMode, TJoinsNotNullable>[];
    }>;
    execute: ReturnType<this['prepare']>['execute'];
}
//# sourceMappingURL=select.d.ts.map