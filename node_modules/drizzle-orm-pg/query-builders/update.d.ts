import { GetColumnData } from 'drizzle-orm';
import { QueryPromise } from 'drizzle-orm/query-promise';
import { Param, Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { Simplify } from 'drizzle-orm/utils';
import { PgDialect } from '../dialect';
import { SelectFields, SelectFieldsOrdered, SelectResultFields } from '../operations';
import { PgSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT, QueryResultKind } from '../session';
import { AnyPgTable, GetTableConfig, InferModel } from '../table';
export interface PgUpdateConfig {
    where?: SQL | undefined;
    set: PgUpdateSet;
    table: AnyPgTable;
    returning?: SelectFieldsOrdered;
}
export declare type PgUpdateSetSource<TTable extends AnyPgTable> = Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'> | SQL;
}>;
export declare type PgUpdateSet = Record<string, SQL | Param | null | undefined>;
export declare class PgUpdateBuilder<TTable extends AnyPgTable, TQueryResult extends QueryResultHKT> {
    private table;
    private session;
    private dialect;
    protected $table: TTable;
    constructor(table: TTable, session: PgSession, dialect: PgDialect);
    set(values: PgUpdateSetSource<TTable>): PgUpdate<TTable, TQueryResult>;
}
export interface PgUpdate<TTable extends AnyPgTable, TQueryResult extends QueryResultHKT, TReturning extends Record<string, unknown> | undefined = undefined> extends QueryPromise<TReturning extends undefined ? QueryResultKind<TQueryResult, never> : TReturning[]>, SQLWrapper {
}
export declare class PgUpdate<TTable extends AnyPgTable, TQueryResult extends QueryResultHKT, TReturning extends Record<string, unknown> | undefined = undefined> extends QueryPromise<TReturning extends undefined ? QueryResultKind<TQueryResult, never> : TReturning[]> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    protected $return: TReturning;
    private config;
    constructor(table: TTable, set: PgUpdateSet, session: PgSession, dialect: PgDialect);
    where(where: SQL | undefined): Omit<this, 'where'>;
    returning(): Omit<PgUpdate<TTable, TQueryResult, InferModel<TTable>>, 'where' | 'returning'>;
    returning<TSelectedFields extends SelectFields>(fields: TSelectedFields): Omit<PgUpdate<TTable, TQueryResult, SelectResultFields<TSelectedFields>>, 'where' | 'returning'>;
    toSQL(): Query;
    private _prepare;
    prepare(name: string): PreparedQuery<PreparedQueryConfig & {
        execute: TReturning extends undefined ? QueryResultKind<TQueryResult, never> : TReturning[];
    }>;
    execute: ReturnType<this['prepare']>['execute'];
}
//# sourceMappingURL=update.d.ts.map