import { GetColumnConfig } from 'drizzle-orm';
import { Placeholder, SQL, SQLResponse } from 'drizzle-orm/sql';
import { Simplify } from 'drizzle-orm/utils';
import { AnyPgColumn } from '../columns';
import { ChangeColumnTableName } from '../columns/common';
import { SelectFields, SelectFieldsOrdered, SelectResultField, SelectResultFields } from '../operations';
import { AnyPgTable, GetTableConfig, PgTableWithColumns, TableConfig, UpdateTableConfig } from '../table';
import { PgSelect } from './select';
export declare type JoinType = 'inner' | 'left' | 'right' | 'full';
export declare type SelectMode = 'partial' | 'single' | 'multiple';
export interface JoinsValue {
    on: SQL;
    table: AnyPgTable;
    joinType: JoinType;
}
export declare type JoinNullability = 'nullable' | 'null' | 'not-null';
export declare type ApplyNullability<T, TNullability extends JoinNullability> = TNullability extends 'nullable' ? T | null : TNullability extends 'null' ? null : T;
export declare type ApplyNullabilityNested<T, TNullability extends JoinNullability> = T extends Record<string, any> ? {
    [Key in keyof T]: ApplyNullabilityNested<T[Key], TNullability>;
} : ApplyNullability<T, TNullability>;
export declare type ApplyNotNullMapToJoins<TResult, TJoinsNotNullable extends Record<string, JoinNullability>> = TJoinsNotNullable extends TJoinsNotNullable ? {
    [TTableName in keyof TResult & keyof TJoinsNotNullable & string]: ApplyNullability<TResult[TTableName], TJoinsNotNullable[TTableName]>;
} : never;
export declare type SelectResult<TResult, TSelectMode extends SelectMode, TJoinsNotNullable extends Record<string, JoinNullability>> = TSelectMode extends 'partial' ? SelectPartialResult<TResult, TJoinsNotNullable> : TSelectMode extends 'single' ? TResult : RemoveDuplicates<Simplify<ApplyNotNullMapToJoins<TResult, TJoinsNotNullable>>>;
declare type GetNullableKeys<T extends Record<string, JoinNullability>> = {
    [Key in keyof T]: T[Key] extends 'nullable' ? Key : never;
}[keyof T];
declare type SplitNullability<T extends Record<string, JoinNullability>> = RemoveDuplicates<'nullable' extends T[keyof T] ? T extends T ? GetNullableKeys<T> extends infer TKey extends string ? [TKey] extends [TKey] ? TKey extends TKey ? Simplify<SplitNullability<Omit<T, TKey>> & {
    [Key in TKey]: 'not-null';
}> | Simplify<SplitNullability<Omit<T, TKey>> & {
    [Key in TKey]: 'null';
}> : never : never : T : never : T>;
declare type SelectPartialResult<TFields, TNullability extends Record<string, JoinNullability>> = SplitNullability<TNullability> extends infer TNullability extends Record<string, JoinNullability> ? TNullability extends TNullability ? {
    [Key in keyof TFields as Key extends string ? Key : never]: TFields[Key] extends infer TField ? TField extends AnyPgTable ? SelectPartialResult<GetTableConfig<TField, 'columns'>, TNullability> : TField extends AnyPgColumn ? GetColumnConfig<TField, 'tableName'> extends infer TTableName extends keyof TNullability ? ApplyNullability<SelectResultField<TField>, TNullability[TTableName]> : never : TField extends SQL | SQLResponse ? SelectResultField<TField> : TField extends Record<string, any> ? SelectPartialResult<TField, TNullability> : SelectResultField<TField> : never;
} : never : never;
export declare type AnyPgSelect = PgSelect<any, any, any, any>;
export declare type BuildAliasTable<TTable extends AnyPgTable, TAlias extends string> = GetTableConfig<TTable> extends infer TConfig extends TableConfig ? PgTableWithColumns<UpdateTableConfig<TConfig, {
    name: TAlias;
    columns: Simplify<MapColumnsToTableAlias<TConfig['columns'], TAlias>>;
}>> : never;
export declare type MapColumnsToTableAlias<TColumns extends Record<string, AnyPgColumn>, TAlias extends string> = {
    [Key in keyof TColumns]: ChangeColumnTableName<TColumns[Key], TAlias>;
};
export declare type AppendToResult<TTableName extends AnyPgTable, TResult, TJoinedName extends string, TSelectedFields extends SelectFields, TOldSelectMode extends SelectMode> = TOldSelectMode extends 'partial' ? TResult : TOldSelectMode extends 'single' ? Record<GetTableConfig<TTableName, 'name'>, TResult> & Record<TJoinedName, SelectResultFields<TSelectedFields>> : Simplify<TResult & Record<TJoinedName, SelectResultFields<TSelectedFields>>>;
declare type SetJoinsNotNull<TJoinsNotNull extends Record<string, JoinNullability>, TValue extends JoinNullability> = {
    [Key in keyof TJoinsNotNull]: TValue;
};
declare type UnionToParm<U> = U extends any ? (k: U) => void : never;
declare type UnionToSect<U> = UnionToParm<U> extends ((k: infer I) => void) ? I : never;
declare type ExtractParm<F> = F extends {
    (a: infer A): void;
} ? A : never;
declare type SpliceOne<Union> = Exclude<Union, ExtractOne<Union>>;
declare type ExtractOne<Union> = ExtractParm<UnionToSect<UnionToParm<Union>>>;
declare type ToTupleRec<Union, Result extends any[] = []> = SpliceOne<Union> extends never ? [ExtractOne<Union>, ...Result] : ToTupleRec<SpliceOne<Union>, [ExtractOne<Union>, ...Result]>;
export declare type RemoveDuplicates<T> = ToTupleRec<T> extends any[] ? ToTupleRec<T>[number] : never;
export declare type AppendToJoinsNotNull<TJoinsNotNull extends Record<string, JoinNullability>, TJoinedName extends string, TJoinType extends JoinType> = Simplify<'left' extends TJoinType ? TJoinsNotNull & {
    [name in TJoinedName]: 'nullable';
} : 'right' extends TJoinType ? SetJoinsNotNull<TJoinsNotNull, 'nullable'> & {
    [name in TJoinedName]: 'not-null';
} : 'inner' extends TJoinType ? SetJoinsNotNull<TJoinsNotNull, 'not-null'> & {
    [name in TJoinedName]: 'not-null';
} : 'full' extends TJoinType ? (TJoinsNotNull & {
    [name in TJoinedName]: 'not-null';
}) | (TJoinsNotNull & {
    [name in TJoinedName]: 'null';
}) | (SetJoinsNotNull<TJoinsNotNull, 'null'> & {
    [name in TJoinedName]: 'not-null';
}) : never>;
export interface PgSelectConfig {
    fields: SelectFieldsOrdered;
    where?: SQL | undefined;
    table: AnyPgTable;
    limit?: number | Placeholder;
    offset?: number | Placeholder;
    joins: Record<string, JoinsValue>;
    orderBy: SQL[];
    groupBy: (AnyPgColumn | SQL)[];
}
export declare type JoinFn<TTable extends AnyPgTable, TSelectMode extends SelectMode, TJoinType extends JoinType, TResult, TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetTableConfig<TTable, 'name'>, 'not-null'>> = <TJoinedTable extends AnyPgTable, TJoinedName extends GetTableConfig<TJoinedTable, 'name'> = GetTableConfig<TJoinedTable, 'name'>>(table: TJoinedTable, on: SQL) => PgSelect<TTable, AppendToResult<TTable, TResult, TJoinedName, GetTableConfig<TJoinedTable, 'columns'>, TSelectMode>, TSelectMode extends 'partial' ? TSelectMode : 'multiple', AppendToJoinsNotNull<TJoinsNotNullable, TJoinedName, TJoinType>>;
export {};
//# sourceMappingURL=select.types.d.ts.map