import { GetColumnData } from 'drizzle-orm';
import { OptionalKeyOnly, RequiredKeyOnly } from 'drizzle-orm/operations';
import { Table } from 'drizzle-orm/table';
import { Update } from 'drizzle-orm/utils';
import { Simplify } from 'drizzle-orm/utils';
import { CheckBuilder } from './checks';
import { AnyPgColumn, AnyPgColumnBuilder, BuildColumns } from './columns/common';
import { ForeignKeyBuilder } from './foreign-keys';
import { AnyIndexBuilder } from './indexes';
export declare type PgTableExtraConfig = Record<string, AnyIndexBuilder | CheckBuilder | ForeignKeyBuilder>;
export interface TableConfig<TName extends string = string> {
    name: TName;
    columns: Record<string | symbol, AnyPgColumn<{
        tableName: TName;
    }>>;
}
export declare type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Update<T, TUpdate>;
export declare class PgTable<T extends Partial<TableConfig>> extends Table<T['name']> {
    protected $columns: T['columns'];
}
export declare type AnyPgTable<TPartial extends Partial<TableConfig> = {}> = PgTable<UpdateTableConfig<TableConfig, TPartial>>;
export declare type PgTableWithColumns<T extends TableConfig> = PgTable<T> & {
    [Key in keyof T['columns']]: T['columns'][Key];
};
/**
 * See `GetColumnConfig`.
 */
export declare type GetTableConfig<T extends AnyPgTable, TParam extends keyof TableConfig | undefined = undefined> = T extends PgTableWithColumns<infer TConfig> ? TParam extends undefined ? TConfig : TParam extends keyof TConfig ? TConfig[TParam] : TConfig : never;
export declare type InferModel<TTable extends AnyPgTable, TInferMode extends 'select' | 'insert' = 'select'> = TInferMode extends 'insert' ? Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as RequiredKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
} & {
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as OptionalKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
}> : {
    [Key in keyof GetTableConfig<TTable, 'columns'>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
};
export interface PgSchema {
    schemaName: string;
}
export declare function isPgSchema(obj: unknown): obj is PgSchema;
export declare function pgSchema<T extends string = string>(schemaName: T extends 'public' ? "You can't specify 'public' as schema name. Postgres is using public schema by default. If you want to use 'public' schema, just type pgTable() instead of creating own schema" : T): (<TTableName extends string, TColumnsMap extends Record<string, AnyPgColumnBuilder<{}>>>(name: TTableName, columns: TColumnsMap, extraConfig?: ((self: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>) => PgTableExtraConfig) | undefined) => PgTableWithColumns<{
    name: TTableName;
    columns: Simplify<{ [Key in keyof TColumnsMap]: import("./columns/common").BuildColumn<TTableName, TColumnsMap[Key]>; }, {}>;
}>) & PgSchema;
export declare function pgTable<TTableName extends string, TColumnsMap extends Record<string, AnyPgColumnBuilder>>(name: TTableName, columns: TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap>) => PgTableExtraConfig): PgTableWithColumns<{
    name: TTableName;
    columns: BuildColumns<TTableName, TColumnsMap>;
}>;
//# sourceMappingURL=table.d.ts.map