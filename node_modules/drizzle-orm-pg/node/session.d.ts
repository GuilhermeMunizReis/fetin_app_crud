import { Logger } from 'drizzle-orm';
import { Query } from 'drizzle-orm/sql';
import { Client, Pool, PoolClient, QueryResult, QueryResultRow } from 'pg';
import { PgDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { PgSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT } from '../session';
import { Assume } from '../utils';
export declare type NodePgClient = Pool | PoolClient | Client;
export declare class NodePgPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private rawQuery;
    private query;
    constructor(client: NodePgClient, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
export interface NodePgSessionOptions {
    logger?: Logger;
}
export declare class NodePgSession extends PgSession {
    private client;
    private logger;
    constructor(client: NodePgClient, dialect: PgDialect, options?: NodePgSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<QueryResult>;
    queryObjects<T extends QueryResultRow>(query: string, params: unknown[]): Promise<QueryResult<T>>;
}
export interface NodePgQueryResultHKT extends QueryResultHKT {
    type: QueryResult<Assume<this['row'], QueryResultRow>>;
}
//# sourceMappingURL=session.d.ts.map