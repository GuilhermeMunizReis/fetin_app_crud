"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.pgTable = exports.pgSchema = exports.isPgSchema = exports.PgTable = exports.Checks = exports.ExtraConfig = exports.ForeignKeys = exports.Indexes = void 0;
const table_1 = require("drizzle-orm/table");
/** @internal */
exports.Indexes = Symbol('Indexes');
/** @internal */
exports.ForeignKeys = Symbol('ForeignKeys');
/** @internal */
exports.ExtraConfig = Symbol('ExtraConfig');
/** @internal */
exports.Checks = Symbol('Checks');
class PgTable extends table_1.Table {
    constructor() {
        super(...arguments);
        /** @internal */
        this[_a] = {};
        /** @internal */
        this[_b] = {};
        /** @internal */
        this[_c] = {};
        /** @internal */
        this[_d] = undefined;
    }
}
exports.PgTable = PgTable;
table_1.Table.Symbol.Columns, _a = exports.Indexes, _b = exports.ForeignKeys, _c = exports.Checks, _d = exports.ExtraConfig;
/** @internal */
PgTable.Symbol = Object.assign(table_1.Table.Symbol, {
    Indexes: exports.Indexes,
    ForeignKeys: exports.ForeignKeys,
    Checks: exports.Checks,
    ExtraConfig: exports.ExtraConfig,
});
const isPgSchemaSym = Symbol('isPgSchema');
function isPgSchema(obj) {
    return !!obj && typeof obj === 'function' && isPgSchemaSym in obj;
}
exports.isPgSchema = isPgSchema;
function pgSchema(schemaName) {
    if (schemaName === 'public') {
        throw Error(`You can't specify 'public' as schema name. Postgres is using public schema by default`);
    }
    const schemaValue = {
        schemaName,
        [isPgSchemaSym]: true,
    };
    const columnFactory = (name, columns, extraConfig) => pgTableWithSchema(name, columns, schemaName, extraConfig);
    return Object.assign(columnFactory, schemaValue);
}
exports.pgSchema = pgSchema;
function pgTableWithSchema(name, columns, schema, extraConfig) {
    const rawTable = new PgTable(name, schema);
    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilder]) => {
        const column = colBuilder.build(rawTable);
        colBuilder.buildForeignKeys(column, rawTable).forEach((fk, fkIndex) => {
            rawTable[exports.ForeignKeys][Symbol(`${name}_${fkIndex}`)] = fk;
        });
        return [name, column];
    }));
    rawTable[table_1.Table.Symbol.Columns] = builtColumns;
    const table = Object.assign(rawTable, builtColumns);
    table[table_1.Table.Symbol.Columns] = builtColumns;
    if (extraConfig) {
        table[PgTable.Symbol.ExtraConfig] = extraConfig;
    }
    return table;
}
function pgTable(name, columns, extraConfig) {
    return pgTableWithSchema(name, columns, undefined, extraConfig);
}
exports.pgTable = pgTable;
//# sourceMappingURL=table.js.map