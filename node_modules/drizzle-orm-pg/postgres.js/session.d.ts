import { Logger } from 'drizzle-orm';
import { Query } from 'drizzle-orm/sql';
import { Row, RowList, Sql } from 'postgres';
import { PgDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { PgSession, PreparedQuery, PreparedQueryConfig, QueryResultHKT } from '../session';
import { Assume } from '../utils';
export declare class PostgresJsPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private params;
    private logger;
    private fields;
    private query;
    constructor(client: Sql, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined, name: string | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
export interface PostgresJsSessionOptions {
    logger?: Logger;
}
export declare class PostgresJsSession extends PgSession {
    client: Sql;
    logger: Logger;
    constructor(client: Sql, dialect: PgDialect, options?: PostgresJsSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectFieldsOrdered | undefined, name: string | undefined): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<RowList<Row[]>>;
    queryObjects<T extends Row>(query: string, params: unknown[]): Promise<RowList<T[]>>;
}
export interface PostgresJsQueryResultHKT extends QueryResultHKT {
    type: RowList<Assume<this['row'], Row>[]>;
}
//# sourceMappingURL=session.d.ts.map