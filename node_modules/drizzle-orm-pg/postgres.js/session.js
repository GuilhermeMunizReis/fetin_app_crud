"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresJsSession = exports.PostgresJsPreparedQuery = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const sql_1 = require("drizzle-orm/sql");
const utils_1 = require("drizzle-orm/utils");
const session_1 = require("../session");
class PostgresJsPreparedQuery extends session_1.PreparedQuery {
    constructor(client, queryString, params, logger, fields, name) {
        super();
        this.client = client;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.query = queryString;
    }
    execute(placeholderValues = {}) {
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
        this.logger.logQuery(this.query, params);
        const { fields } = this;
        if (!fields) {
            return this.client.unsafe(this.query, params);
        }
        const result = this.client.unsafe(this.query, params).values();
        return result.then((result) => result.map((row) => (0, utils_1.mapResultRow)(fields, row)));
    }
    all(placeholderValues = {}) {
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
        this.logger.logQuery(this.query, params);
        return this.client.unsafe(this.query, params);
    }
    values(placeholderValues = {}) {
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues);
        this.logger.logQuery(this.query, params);
        return this.client.unsafe(this.query, params).values();
    }
}
exports.PostgresJsPreparedQuery = PostgresJsPreparedQuery;
class PostgresJsSession extends session_1.PgSession {
    constructor(client, dialect, options = {}) {
        var _a;
        super(dialect);
        this.client = client;
        this.logger = (_a = options.logger) !== null && _a !== void 0 ? _a : new drizzle_orm_1.NoopLogger();
    }
    prepareQuery(query, fields, name) {
        return new PostgresJsPreparedQuery(this.client, query.sql, query.params, this.logger, fields, name);
    }
    query(query, params) {
        this.logger.logQuery(query, params);
        return this.client.unsafe(query, params).values();
    }
    queryObjects(query, params) {
        return this.client.unsafe(query, params);
    }
}
exports.PostgresJsSession = PostgresJsSession;
//# sourceMappingURL=session.js.map