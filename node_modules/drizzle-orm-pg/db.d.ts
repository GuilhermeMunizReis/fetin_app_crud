import { SQLWrapper } from 'drizzle-orm/sql';
import { PgDialect } from './dialect';
import { PgDelete, PgInsertBuilder, PgSelect, PgUpdateBuilder } from './query-builders';
import { PgSession, QueryResultHKT, QueryResultKind } from './session';
import { AnyPgTable } from './table';
export declare class PgDatabase<TQueryResult extends QueryResultHKT, TSession extends PgSession> {
    constructor(
    /** @internal */
    dialect: PgDialect, 
    /** @internal */
    session: TSession);
    select<TTable extends AnyPgTable>(from: TTable): PgSelect<TTable>;
    update<TTable extends AnyPgTable>(table: TTable): PgUpdateBuilder<TTable, TQueryResult>;
    insert<TTable extends AnyPgTable>(table: TTable): PgInsertBuilder<TTable, TQueryResult>;
    delete<TTable extends AnyPgTable>(table: TTable): PgDelete<TTable, TQueryResult>;
    execute<TRow extends Record<string, unknown> = Record<string, unknown>>(query: SQLWrapper): Promise<QueryResultKind<TQueryResult, TRow>>;
}
//# sourceMappingURL=db.d.ts.map